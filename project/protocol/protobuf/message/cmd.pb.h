// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd.proto

#ifndef PROTOBUF_cmd_2eproto__INCLUDED
#define PROTOBUF_cmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace cs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cmd_2eproto();
void protobuf_AssignDesc_cmd_2eproto();
void protobuf_ShutdownFile_cmd_2eproto();


enum ID {
  ID_C2S_Login = 0,
  ID_S2C_Login = 1
};
bool ID_IsValid(int value);
const ID ID_MIN = ID_C2S_Login;
const ID ID_MAX = ID_S2C_Login;
const int ID_ARRAYSIZE = ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ID_descriptor();
inline const ::std::string& ID_Name(ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ID_descriptor(), value);
}
inline bool ID_Parse(
    const ::std::string& name, ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ID>(
    ID_descriptor(), name, value);
}
enum RET {
  RET_SUCCESS = 0,
  RET_FAILD = 1
};
bool RET_IsValid(int value);
const RET RET_MIN = RET_SUCCESS;
const RET RET_MAX = RET_FAILD;
const int RET_ARRAYSIZE = RET_MAX + 1;

const ::google::protobuf::EnumDescriptor* RET_descriptor();
inline const ::std::string& RET_Name(RET value) {
  return ::google::protobuf::internal::NameOfEnum(
    RET_descriptor(), value);
}
inline bool RET_Parse(
    const ::std::string& name, RET* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RET>(
    RET_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cs::ID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::ID>() {
  return ::cs::ID_descriptor();
}
template <> struct is_proto_enum< ::cs::RET> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::RET>() {
  return ::cs::RET_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2eproto__INCLUDED
