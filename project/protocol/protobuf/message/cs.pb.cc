// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cs {

namespace {

const ::google::protobuf::Descriptor* C2S_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Login_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_2eproto() {
  protobuf_AddDesc_cs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs.proto");
  GOOGLE_CHECK(file != NULL);
  C2S_Login_descriptor_ = file->message_type(0);
  static const int C2S_Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Login, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Login, name_),
  };
  C2S_Login_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      C2S_Login_descriptor_,
      C2S_Login::default_instance_,
      C2S_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Login, _has_bits_[0]),
      -1,
      -1,
      sizeof(C2S_Login),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Login, _internal_metadata_),
      -1);
  S2C_Login_descriptor_ = file->message_type(1);
  static const int S2C_Login_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Login, ret_),
  };
  S2C_Login_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      S2C_Login_descriptor_,
      S2C_Login::default_instance_,
      S2C_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Login, _has_bits_[0]),
      -1,
      -1,
      sizeof(S2C_Login),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Login, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      C2S_Login_descriptor_, &C2S_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      S2C_Login_descriptor_, &S2C_Login::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_2eproto() {
  delete C2S_Login::default_instance_;
  delete C2S_Login_reflection_;
  delete S2C_Login::default_instance_;
  delete S2C_Login_reflection_;
}

void protobuf_AddDesc_cs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010cs.proto\022\002cs\"%\n\tC2S_Login\022\n\n\002id\030\001 \002(\005\022"
    "\014\n\004name\030\002 \002(\t\"\030\n\tS2C_Login\022\013\n\003ret\030\001 \002(\005", 79);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs.proto", &protobuf_RegisterTypes);
  C2S_Login::default_instance_ = new C2S_Login();
  S2C_Login::default_instance_ = new S2C_Login();
  C2S_Login::default_instance_->InitAsDefaultInstance();
  S2C_Login::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_2eproto {
  StaticDescriptorInitializer_cs_2eproto() {
    protobuf_AddDesc_cs_2eproto();
  }
} static_descriptor_initializer_cs_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int C2S_Login::kIdFieldNumber;
const int C2S_Login::kNameFieldNumber;
#endif  // !_MSC_VER

C2S_Login::C2S_Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.C2S_Login)
}

void C2S_Login::InitAsDefaultInstance() {
}

C2S_Login::C2S_Login(const C2S_Login& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.C2S_Login)
}

void C2S_Login::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Login::~C2S_Login() {
  // @@protoc_insertion_point(destructor:cs.C2S_Login)
  SharedDtor();
}

void C2S_Login::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void C2S_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Login_descriptor_;
}

const C2S_Login& C2S_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2eproto();
  return *default_instance_;
}

C2S_Login* C2S_Login::default_instance_ = NULL;

C2S_Login* C2S_Login::New(::google::protobuf::Arena* arena) const {
  C2S_Login* n = new C2S_Login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2S_Login::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    id_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool C2S_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.C2S_Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cs.C2S_Login.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.C2S_Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.C2S_Login)
  return false;
#undef DO_
}

void C2S_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.C2S_Login)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cs.C2S_Login.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.C2S_Login)
}

::google::protobuf::uint8* C2S_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.C2S_Login)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cs.C2S_Login.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.C2S_Login)
  return target;
}

int C2S_Login::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
int C2S_Login::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Login::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const C2S_Login* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const C2S_Login>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Login::MergeFrom(const C2S_Login& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void C2S_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Login::CopyFrom(const C2S_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Login::Swap(C2S_Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2S_Login::InternalSwap(C2S_Login* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2S_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Login_descriptor_;
  metadata.reflection = C2S_Login_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2S_Login

// required int32 id = 1;
bool C2S_Login::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void C2S_Login::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void C2S_Login::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void C2S_Login::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 C2S_Login::id() const {
  // @@protoc_insertion_point(field_get:cs.C2S_Login.id)
  return id_;
}
 void C2S_Login::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:cs.C2S_Login.id)
}

// required string name = 2;
bool C2S_Login::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void C2S_Login::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void C2S_Login::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void C2S_Login::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& C2S_Login::name() const {
  // @@protoc_insertion_point(field_get:cs.C2S_Login.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void C2S_Login::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cs.C2S_Login.name)
}
 void C2S_Login::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cs.C2S_Login.name)
}
 void C2S_Login::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cs.C2S_Login.name)
}
 ::std::string* C2S_Login::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:cs.C2S_Login.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* C2S_Login::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void C2S_Login::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cs.C2S_Login.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int S2C_Login::kRetFieldNumber;
#endif  // !_MSC_VER

S2C_Login::S2C_Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.S2C_Login)
}

void S2C_Login::InitAsDefaultInstance() {
}

S2C_Login::S2C_Login(const S2C_Login& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.S2C_Login)
}

void S2C_Login::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Login::~S2C_Login() {
  // @@protoc_insertion_point(destructor:cs.S2C_Login)
  SharedDtor();
}

void S2C_Login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Login_descriptor_;
}

const S2C_Login& S2C_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2eproto();
  return *default_instance_;
}

S2C_Login* S2C_Login::default_instance_ = NULL;

S2C_Login* S2C_Login::New(::google::protobuf::Arena* arena) const {
  S2C_Login* n = new S2C_Login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_Login::Clear() {
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool S2C_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.S2C_Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.S2C_Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.S2C_Login)
  return false;
#undef DO_
}

void S2C_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.S2C_Login)
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.S2C_Login)
}

::google::protobuf::uint8* S2C_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.S2C_Login)
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.S2C_Login)
  return target;
}

int S2C_Login::ByteSize() const {
  int total_size = 0;

  // required int32 ret = 1;
  if (has_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Login::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const S2C_Login* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_Login>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Login::MergeFrom(const S2C_Login& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void S2C_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Login::CopyFrom(const S2C_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2C_Login::Swap(S2C_Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_Login::InternalSwap(S2C_Login* other) {
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Login_descriptor_;
  metadata.reflection = S2C_Login_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_Login

// required int32 ret = 1;
bool S2C_Login::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2C_Login::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void S2C_Login::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2C_Login::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::google::protobuf::int32 S2C_Login::ret() const {
  // @@protoc_insertion_point(field_get:cs.S2C_Login.ret)
  return ret_;
}
 void S2C_Login::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:cs.S2C_Login.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

// @@protoc_insertion_point(global_scope)
